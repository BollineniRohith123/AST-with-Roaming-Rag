// This is a generated file, modify: generate/templates/templates/class_content.cc

#include <nan.h>
#include <string.h>

extern "C" {
  #include <git2.h>
 }

#include "../include/nodegit.h"
#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/odb_backend_loose_options.h"
#include "nodegit_wrapper.cc"

 
#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

  GitOdbBackendLooseOptions::~GitOdbBackendLooseOptions() {
    // this will cause an error if you have a non-self-freeing object that also needs
    // to save values. Since the object that will eventually free the object has no
    // way of knowing to free these values.
   }

  void GitOdbBackendLooseOptions::InitializeComponent(v8::Local<v8::Object> target, nodegit::Context *nodegitContext) {
    Nan::HandleScope scope;

    v8::Local<v8::External> nodegitExternal = Nan::New<v8::External>(nodegitContext);
    v8::Local<FunctionTemplate> tpl = Nan::New<FunctionTemplate>(JSNewFunction, nodegitExternal);

    tpl->InstanceTemplate()->SetInternalFieldCount(2);
    tpl->SetClassName(Nan::New("OdbBackendLooseOptions").ToLocalChecked());

         Nan::SetPrototypeMethod(tpl, "version", Version, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "flags", Flags, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "compressionLevel", CompressionLevel, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "dirMode", DirMode, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "fileMode", FileMode, nodegitExternal);
         Nan::SetPrototypeMethod(tpl, "oidType", OidType, nodegitExternal);
  
    InitializeTemplate(tpl);

    v8::Local<Function> constructor_template = Nan::GetFunction(tpl).ToLocalChecked();
    nodegitContext->SaveToPersistent("GitOdbBackendLooseOptions::Template", constructor_template);
    Nan::Set(target, Nan::New("OdbBackendLooseOptions").ToLocalChecked(), constructor_template);
  }

      // start field block
    NAN_METHOD(GitOdbBackendLooseOptions::Version) {
      v8::Local<v8::Value> v8ConversionSlot;

            unsigned int
           version =
          Nan::ObjectWrap::Unwrap<GitOdbBackendLooseOptions>(info.This())->GetValue()->version;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( version);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitOdbBackendLooseOptions::Flags) {
      v8::Local<v8::Value> v8ConversionSlot;

            uint32_t
           flags =
          Nan::ObjectWrap::Unwrap<GitOdbBackendLooseOptions>(info.This())->GetValue()->flags;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( flags);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitOdbBackendLooseOptions::CompressionLevel) {
      v8::Local<v8::Value> v8ConversionSlot;

            int
           compression_level =
          Nan::ObjectWrap::Unwrap<GitOdbBackendLooseOptions>(info.This())->GetValue()->compression_level;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( compression_level);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitOdbBackendLooseOptions::DirMode) {
      v8::Local<v8::Value> v8ConversionSlot;

            unsigned int
           dir_mode =
          Nan::ObjectWrap::Unwrap<GitOdbBackendLooseOptions>(info.This())->GetValue()->dir_mode;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( dir_mode);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitOdbBackendLooseOptions::FileMode) {
      v8::Local<v8::Value> v8ConversionSlot;

            unsigned int
           file_mode =
          Nan::ObjectWrap::Unwrap<GitOdbBackendLooseOptions>(info.This())->GetValue()->file_mode;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( file_mode);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
     // start field block
    NAN_METHOD(GitOdbBackendLooseOptions::OidType) {
      v8::Local<v8::Value> v8ConversionSlot;

            git_oid_t
           oid_type =
          Nan::ObjectWrap::Unwrap<GitOdbBackendLooseOptions>(info.This())->GetValue()->oid_type;
 // start convert_to_v8 block
     v8ConversionSlot = Nan::New<Number>( oid_type);
  // end convert_to_v8 block
      info.GetReturnValue().Set(v8ConversionSlot);
    }
    // end field block
  // force base class template instantiation, to make sure we get all the
// methods, statics, etc.
template class NodeGitWrapper<GitOdbBackendLooseOptionsTraits>;
 